// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: alert_redemption.sql

package queries

import (
	"context"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const recordPendingAlertRedemptionOutflow = `-- name: RecordPendingAlertRedemptionOutflow :one
insert into ledger.flow (
    id,
    type,
    metadata,
    twitch_user_id,
    delta_points,
    created_at
) values (
    gen_random_uuid(),
    'alert-redemption',
    (case when $1::jsonb is null
        then '{}'::jsonb
        else $1::jsonb
    end) || jsonb_build_object('type', $2::text),
    $3,
    -1 * $4::integer,
    now()
)
returning flow.id
`

type RecordPendingAlertRedemptionOutflowParams struct {
	AlertMetadata    pqtype.NullRawMessage
	AlertType        string
	TwitchUserID     string
	NumPointsToDebit int32
}

func (q *Queries) RecordPendingAlertRedemptionOutflow(ctx context.Context, arg RecordPendingAlertRedemptionOutflowParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, recordPendingAlertRedemptionOutflow,
		arg.AlertMetadata,
		arg.AlertType,
		arg.TwitchUserID,
		arg.NumPointsToDebit,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
