// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: subscription.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const recordSubscriptionInflow = `-- name: RecordSubscriptionInflow :one
insert into ledger.flow (
    id,
    type,
    metadata,
    twitch_user_id,
    delta_points,
    created_at,
    finalized_at,
    accepted
) values (
    gen_random_uuid(),
    'subscription',
    jsonb_build_object(
        'message', $1::text,
        'is_initial', $2::boolean,
        'is_gift', $3::boolean,
        'credit_multiplier', $4::float
    ),
    $5,
    $6,
    now(),
    now(),
    true
)
returning flow.id
`

type RecordSubscriptionInflowParams struct {
	Message           string
	IsInitial         bool
	IsGift            bool
	CreditMultiplier  float64
	TwitchUserID      string
	NumPointsToCredit int32
}

func (q *Queries) RecordSubscriptionInflow(ctx context.Context, arg RecordSubscriptionInflowParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, recordSubscriptionInflow,
		arg.Message,
		arg.IsInitial,
		arg.IsGift,
		arg.CreditMultiplier,
		arg.TwitchUserID,
		arg.NumPointsToCredit,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
