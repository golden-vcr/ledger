// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package queries

import (
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

// Lookup describing the total and available point balance for each user, based on the aggregate of all inflows and outflows recorded for that user.
type LedgerBalance struct {
	// ID of the user for whom we're summarizing transaction data.
	TwitchUserID string
	// Total number of points credited to this user currently.
	TotalPoints interface{}
	// Total number of points available for this user to spend.
	AvailablePoints interface{}
}

// Record of a single transaction, i.e. an inflow or an outflow, that credits points to or debits points from a given user. A transaction may initially exist in a pending state, in which case the finalized_at timestamp will be null. A pending transaction will eventually be finalized, at which point it is either accepted or rejected. A pending inflow counts toward the user's total balance but does not contribute to their available balance until accepted. A pending outflow immediately deducts from the user's available balance, but does not reduce their total balance until accepted. Any transaction that's rejected will be retained for record-keeping purposes but will have no effect on any balances.
type LedgerFlow struct {
	// Unique ID to serve as a handle for this ledger transaction.
	ID uuid.UUID
	// Type of transaction, corresponding to a valid name from the flow_type table. The corresponding flow_type.is_inflow value indicates whether this transaction is an inflow or an outflow.
	Type string
	// Additional JSON metadata providing context about this transaction. The exact semantics of this object are flow-type-dependent; each valid flow_type should describe the required/supported metadata fields and impose constraints on this column where necessary.
	Metadata json.RawMessage
	// ID of the user whose balance this transaction affects.
	TwitchUserID string
	// Change in point balance to be applied by this transaction: positive for an inflow; negative for an outflow.
	DeltaPoints int32
	// Time at which this transaction was initially recorded.
	CreatedAt time.Time
	// Time at which this transaction was finalized. If NULL, the transaction is pending.
	FinalizedAt sql.NullTime
	// For a finalized transaction, indicates whether the transaction was accepted or rejected.
	Accepted bool
	// Whether this transaction should affect the user's total point balance, computed as a function of delta_points, finalized_at, and accepted.
	AffectsTotalBalance sql.NullBool
	// Whether this transaction should affect the user's available point balance, computed as a function of delta_points, finalized_at, and accepted.
	AffectsAvailableBalance sql.NullBool
}

// Internal record of a valid type of flow (i.e. inflow or outflow) by which points can be credited to or debited from a user.
type LedgerFlowType struct {
	// Unique string name by which the flow type is identified, canonically kebab-case.
	Name string
	// Developer-facing description of this flow type; including its purpose and a description of any additional metadata required for transactions of this type.
	Comment string
}

// Record of a short-lived cryptographic token used to authenticate the given user, solely for the purpose of allowing them access to real-time transaction data via the /notifications SSE endpoint.
type LedgerSseToken struct {
	// ID of the user whose transaction notifications should be sent to the bearer of this token.
	TwitchUserID string
	// String token value, typically a hex-encoded cryptographically random string.
	Value string
	// Time at which the token should no longer be accepted (and may be purged).
	ExpiresAt time.Time
}
