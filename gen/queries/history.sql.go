// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: history.sql

package queries

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const getTransactionHistory = `-- name: GetTransactionHistory :many
select
    flow.id,
    flow.type,
    flow.metadata,
    flow.delta_points,
    flow.created_at,
    flow.finalized_at,
    flow.accepted
from ledger.flow
where flow.twitch_user_id = $1
and case when $2::uuid is null
    then true
    else flow.created_at <= (
        select flow.created_at from ledger.flow where flow.id = $2::uuid
    )
end
order by flow.created_at desc
limit $3
`

type GetTransactionHistoryParams struct {
	TwitchUserID string
	StartID      uuid.NullUUID
	NumRecords   int32
}

type GetTransactionHistoryRow struct {
	ID          uuid.UUID
	Type        string
	Metadata    json.RawMessage
	DeltaPoints int32
	CreatedAt   time.Time
	FinalizedAt sql.NullTime
	Accepted    bool
}

func (q *Queries) GetTransactionHistory(ctx context.Context, arg GetTransactionHistoryParams) ([]GetTransactionHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionHistory, arg.TwitchUserID, arg.StartID, arg.NumRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionHistoryRow
	for rows.Next() {
		var i GetTransactionHistoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Metadata,
			&i.DeltaPoints,
			&i.CreatedAt,
			&i.FinalizedAt,
			&i.Accepted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
