// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: finalize.sql

package queries

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const finalizeFlow = `-- name: FinalizeFlow :execresult
update ledger.flow set
    finalized_at = now(),
    accepted = $1
where
    flow.id = $2
    and finalized_at is null
`

type FinalizeFlowParams struct {
	Accepted bool
	FlowID   uuid.UUID
}

func (q *Queries) FinalizeFlow(ctx context.Context, arg FinalizeFlowParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, finalizeFlow, arg.Accepted, arg.FlowID)
}

const getFlow = `-- name: GetFlow :one
select
    twitch_user_id,
    finalized_at,
    accepted
from ledger.flow
where flow.id = $1
`

type GetFlowRow struct {
	TwitchUserID string
	FinalizedAt  sql.NullTime
	Accepted     bool
}

func (q *Queries) GetFlow(ctx context.Context, flowID uuid.UUID) (GetFlowRow, error) {
	row := q.db.QueryRowContext(ctx, getFlow, flowID)
	var i GetFlowRow
	err := row.Scan(&i.TwitchUserID, &i.FinalizedAt, &i.Accepted)
	return i, err
}
